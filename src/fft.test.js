import {
  gOmegaPiImag,
  gOmegaPiReal,
  bitReverse,
} from './fft';



describe("gOmegaPiReal", () => {
  test('contains table', () => {
    expect(gOmegaPiReal).toEqual([
      -2,                       -2,
      -0.9999999999999998,     -0.07612046748871323,
      -0.0012045437948276074, -0.000004706190423828488,
      -4.595892687109027e-9,  -1.1220441139229836e-12,
      -6.84841378126949e-17,  -1.0449850130110916e-21,
      -3.986301471752516e-27,   -3.801633331062809e-33,
      -9.063800170571349e-40,   -5.402445894820302e-47,
      -8.050271711975786e-55,   -2.998959910860578e-63,
      -2.7929990653512795e-72,   -6.502957701103947e-82,
      -3.785219568004801e-92,  -5.508219427436126e-103,
      -2.0038785541823474e-114, -1.8225169280252407e-126,
      -4.143923724826074e-139, -2.3555479201752826e-152,
      -3.347434926830719e-166, -1.1892477853446049e-180,
      -1.0562642186192449e-195, -2.3453777111975713e-211,
      -1.3019461682070972e-227, -1.8068132659575204e-244,
      -6.268642778325674e-262
    ]);
  });
});

describe("gOmegaPiImag", () => {
  test('contains table', () => {
    expect(gOmegaPiImag).toEqual([
      1.2246467991473532e-16,   1.2246467991473532e-16,
      1,       0.3826834323650898,
      0.049067674327418015,     0.003067956762965976,
      0.00009587379909597734, 0.0000014980281131690111,
      1.1703344634137277e-8,    4.571618997709874e-11,
      8.928943354902097e-14,     8.71967124502158e-17,
      4.257651975108193e-20,   1.0394658142353987e-23,
      1.2688791677678207e-27,     7.74462382670789e-32,
      2.363471626802945e-36,    3.606371500858986e-41,
      2.75144310063094e-46,   1.0495922472499619e-51,
      2.0019383378028143e-57,   1.9091971757915633e-63,
      9.103761557538811e-70,    2.170505895027831e-76,
      2.587444657120503e-83,   1.5422371966364998e-90,
      4.5962250132456415e-98,   6.848908980556788e-106,
      5.102834836063376e-114,  1.9009541109440387e-122,
      3.5408029536605603e-131
    ]);
  });
});

describe('bitReverse', () => {
  test('reverses 4 element array', () => {
    const data = [0, 1, 2, 3];
    bitReverse(data)
    expect(data).toEqual([0, 1, 2, 3]);
  });

  test('reverses 8 element array', () => {
    const data = [0, 1, 2, 3, 4, 5, 6, 7];
    bitReverse(data)
    expect(data).toEqual([0, 1, 4, 5, 2, 3, 6, 7]);
  });

  test('reverses 16 element array', () => {
    const data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    bitReverse(data)
    expect(data).toEqual([0, 1, 8, 9, 4, 5, 12, 13, 2, 3, 10, 11, 6, 7, 14, 15]);
  });
});
